ui <- fluidPage(
tableOutput("iris"),
actionButton("actualizar", label = "Insertar una fila de ejemplo al dataset")
)
server <- function(input, output, session) {
output$iris <- renderTable({
if (input$actualizar > 0) {
# Leer dataset actual
datos <- read.csv("./iris.csv")
# Crear fila por añadir al dataset
temp <- data.frame(
Sepal.Length = 0,
Sepal.Width = 0,
Petal.Length = 0,
Petal.Width = 0,
Species = "setosa"
)
datos <- rbind(temp, datos)
# Guardar nuevo dataset
write.csv(datos, "./iris.csv", row.names = FALSE)
# Mostrar nuevo dataset
head(datos)
}
})
}
shinyApp(ui, server)
write.csv(iris, "./iris.csv", row.names = FALSE)
setwd("D:/Mastering-Shiny_Book-Club")
library(shiny)
ui <- fluidPage(
fileInput(
inputId = "carga", label = NULL,
buttonLabel = "Cargar archivo", accept = c(".sav", ".xlsx")
),
numericInput("n", "Filas", value = 5, min = 1, step = 1),
tableOutput("cabeza")
)
server <- function(input, output, session) {
data <- reactive({
req(input$carga)
# Extensión del archivo cargado
ext <- tools::file_ext(input$carga$name)
switch(ext,
sav = haven::read_sav(input$carga$datapath),
xlsx = xlsx::read.xlsx(input$carga$datapath, sheetIndex = 1),
validate("Solo aceptamos archivos de tipo .sav o .xlsx")
)
})
output$cabeza <- renderTable({
head(data(), input$n)
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
titlePanel("Teorema del Límite Central"),
tabsetPanel(
tabPanel("Panel 1",
sidebarLayout(
sidebarPanel(
numericInput("m", "Tamaño de las muestras:", value = 2, min = 11, max = 100)
),
mainPanel(
plotOutput("hist")
)
)
),
tabPanel("Panel 2",
sidebarLayout(
sidebarPanel(
numericInput("n", "Muestras de tamaño:", value = 2, min = 11, max = 100)
),
mainPanel(
plotOutput("histo")
)
)
)
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
medias <- replicate(1e4, mean(runif(input$m)))
hist(medias, breaks = 20, main = "Histograma de las medias")
}, res = 96)
}
shinyApp(ui, server)
setwd("D:/Mastering-Shiny_Book-Club/ejemplos/consultas/ACTUALIZAR_DATA")
# En RStudio, cambiar de directorio antes de correr la app
library(shiny)
# Data inicial
# write.csv(iris, "./iris.csv", row.names = FALSE)
ui <- fluidPage(
tableOutput("iris"),
actionButton("actualizar", label = "Insertar una fila de ejemplo al dataset")
)
server <- function(input, output, session) {
output$iris <- renderTable({
if (input$actualizar > 0) {
# Leer dataset actual
datos <- read.csv("./iris.csv")
# Crear fila por añadir al dataset
temp <- data.frame(
Sepal.Length = 0,
Sepal.Width = 0,
Petal.Length = 0,
Petal.Width = 0,
Species = "setosa"
)
datos <- rbind(temp, datos)
# Guardar nuevo dataset
write.csv(datos, "./iris.csv", row.names = FALSE)
# Mostrar nuevo dataset
head(datos)
}
})
}
shinyApp(ui, server)
iris
# En RStudio, cambiar de directorio antes de correr la app
library(shiny)
# Data inicial
# write.csv(iris, "./iris.csv", row.names = FALSE)
ui <- fluidPage(
tableOutput("iris"),
actionButton("actualizar", label = "Insertar una fila de ejemplo al dataset")
)
server <- function(input, output, session) {
output$iris <- renderTable({
if (input$actualizar > 0) {
# Leer dataset actual
datos <- read.csv("./iris.csv")
# Crear fila por añadir al dataset
temp <- data.frame(
Sepal.Length = 0,
Sepal.Width = 0,
Petal.Length = 0,
Petal.Width = 0,
Species = "setosa"
)
datos <- rbind(temp, datos)
# Guardar nuevo dataset
write.csv(datos, "./iris.csv", row.names = FALSE)
# Mostrar nuevo dataset
head(datos)
}
})
}
shinyApp(ui, server)
iris
head(iris)
# En RStudio, cambiar de directorio antes de correr la app
library(shiny)
# Data inicial
# write.csv(iris, "./iris.csv", row.names = FALSE)
ui <- fluidPage(
tableOutput("iris"),
actionButton("actualizar", label = "Insertar una fila de ejemplo al dataset")
)
server <- function(input, output, session) {
output$iris <- renderTable({
if (input$actualizar > 0) {
# Leer dataset actual
datos <- read.csv("./iris.csv")
# Crear fila por añadir al dataset
temp <- data.frame(
Sepal.Length = 0,
Sepal.Width = 0,
Petal.Length = 0,
Petal.Width = 0,
Species = "setosa"
)
datos <- rbind(temp, datos)
# Guardar nuevo dataset
write.csv(datos, "./iris.csv", row.names = FALSE)
# Mostrar nuevo dataset
head(datos)
}
})
}
shinyApp(ui, server)
setwd("D:/Mastering-Shiny_Book-Club")
data()
nottem
class(nottem)
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-1_base_interactiva")
data()
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-1_base_interactiva")
shiny::runApp()
shiny::runApp()
temperaturas
temperaturas <- read.csv("data/temperaturas.csv")
View(temperaturas)
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-2_actualizar_data")
View(temperaturas)
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-2_actualizar_data")
shiny::runApp()
shiny::runApp()
View(temperaturas)
View(read.csv("data/nueva_data.csv"))
shiny::runApp()
View(read.csv("data/nueva_data.csv"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
# Fijar ruta
setwd(r"(D:\Mastering-Shiny_Book-Club\flujo_de_trabajo\paso-3_reporte_parametrizado)")
# Base de datos usada para crear el data frame "temperaturas":
# nottem (Average Monthly Temperatures at Nottingham, 1920-1939)
temperaturas <- read.csv("temperaturas.csv")
# Fijar un año
# Años posibles: 1920 a 1939
anio <- 1930
# Diagrama de barras
temperatura_anual <- temperaturas[temperaturas$anio == anio,]
temperatura_anual <- unlist(temperatura_anual)[-1]
barplot(
height = temperatura_anual, col ="skyblue",
xlab = "", ylab = "Temperatura promedio",
main = paste0("Año ", anio),
names = colnames(temperatura_anual)[-1], las = 2
)
# Meses de mínima y máxima temperatura
mes_max_temperatura <- colnames(temperaturas)[1+which.max(temperatura_anual)]
mes_min_temperatura <- colnames(temperaturas)[1+which.min(temperatura_anual)]
mes_max_temperatura
mes_min_temperatura
library(shiny)
library(shiny)
ui <- fluidPage(
verbatimTextOutput("x")
)
server <- function(input, output, session) {
output$x <- renderPrint(
session$clientData
)
}
library(shiny)
ui <- fluidPage(
verbatimTextOutput("x")
)
server <- function(input, output, session) {
output$x <- renderPrint(
session$clientData
)
}
shinyApp(ui, server)
runApp('ejemplos')
library(shiny)
ui <- fluidPage(
numericInput("y", "num", 2),
verbatimTextOutput("x")
)
server <- function(input, output, session) {
output$x <- renderPrint(
session$clientData
)
}
shinyApp(ui, server)
setwd("D:/Mastering-Shiny_Book-Club/ejemplos/consultas/ACTUALIZAR_DATA")
library(shiny)
library(googlesheets4)
gs4_deauth()
# Link de la base de datos
url <- "https://docs.google.com/spreadsheets/d/18ahz7Js6V3gwcO1R4T-8jLCVxQoSQs2uAiARnfhfgSM/"
googlesheets4::read_sheet(url)
googlesheets4::gs4_deauth()
url <- "https://docs.google.com/spreadsheets/d/18ahz7Js6V3gwcO1R4T-8jLCVxQoSQs2uAiARnfhfgSM/"
googlesheets4::read_sheet(url)
googlesheets4::gs4_auth(
email = "luciocornejo11@gmail.com",
cache = ".secrets"
)
# Ejecutar antes de publicar la aplicación
# googlesheets4::gs4_auth(
#   email = "luciocornejo11@gmail.com",
#   cache = ".secrets"
# )
# En RStudio, cambiar de directorio antes de correr la app
library(shiny)
library(googlesheets4)
googlesheets4::gs4_auth(
cache = ".secrets",
email = "luciocornejo11@gmail.com"
)
# Link de la base de datos
url <- "https://docs.google.com/spreadsheets/d/18ahz7Js6V3gwcO1R4T-8jLCVxQoSQs2uAiARnfhfgSM/"
ui <- fluidPage(
tableOutput("iris"),
actionButton("actualizar", label = "Insertar una fila de ejemplo al dataset")
)
server <- function(input, output) {
output$iris <- renderTable({
if (input$actualizar > 0) {
# Leer dataset actual
datos <- googlesheets4::read_sheet(url)
# Crear fila por añadir al dataset
temp <- data.frame(
Sepal.Length = 0,
Sepal.Width = 0,
Petal.Length = 0,
Petal.Width = 0,
Species = "setosa"
)
# Guardar nuevo dataset
googlesheets4::sheet_append(url, temp)
# Mostrar nuevo dataset
tail(googlesheets4::read_sheet(url))
}
})
}
shinyApp(ui, server)
shiny::runApp('ultima_sesion')
# ::::::::::::::::::::::::::::::::::::::::::
# Guardemos la data inicial en Google Sheets
# ::::::::::::::::::::::::::::::::::::::::::
url <- "https://docs.google.com/spreadsheets/d/1F1Uupju6kkJhwALZWMypdlT5b1VWsh3ZHadVQiFdsZ8"
# googlesheets4::sheet_write(
#   read.csv("./temperaturas.csv"),
#   ss = url,
#   sheet = "temperaturas" # Primero cambiar manualmente el nombre de la hoja
# )
# Guardar las credenciales en una carpeta .secrets
# googlesheets4::gs4_auth(
#   cache = ".secrets",
#   email = "luciocornejo11@gmail.com"
# )
library(shiny)
library(googlesheets4)
temperaturas <- googlesheets4::read_sheet(url)
runApp('ultima_sesion/paso_0')
# ::::::::::::::::::::::::::::::::::::::::::
# Guardemos la data inicial en Google Sheets
# ::::::::::::::::::::::::::::::::::::::::::
url <- "https://docs.google.com/spreadsheets/d/1F1Uupju6kkJhwALZWMypdlT5b1VWsh3ZHadVQiFdsZ8"
# googlesheets4::sheet_write(
#   read.csv("./temperaturas.csv"),
#   ss = url,
#   sheet = "temperaturas" # Primero cambiar manualmente el nombre de la hoja
# )
# Guardar las credenciales en una carpeta .secrets
googlesheets4::gs4_auth(
cache = ".secrets",
email = "luciocornejo11@gmail.com"
)
library(shiny)
library(googlesheets4)
temperaturas <- googlesheets4::read_sheet(url)
# :::::::::::::::::::
# Interfaz de usuario
# :::::::::::::::::::
ui <- fluidPage(
titlePanel("Temperatura promedio mensual en Nottingham"),
sidebarLayout(
sidebarPanel(
sliderInput("anio", label = "Año", min = 1920, max = 1939, value = 1930),
fileInput("carga", NULL, buttonLabel = "Cargar archivo .csv", accept = ".csv")
),
mainPanel(
plotOutput("barras"),
verbatimTextOutput("min_max")
)
)
)
# ::::::::::::::::
# Función servidor
# ::::::::::::::::
server <- function(input, output) {
data <- eventReactive(input$carga, {
req(input$carga)
# Extensión del archivo cargado
ext <- tools::file_ext(input$carga$name)
if (ext == "csv") {
# Cargar data subida por el usuario
datos_cargados <- read.csv(input$carga$datapath)
# Data actualizada
data_actualizada <- rbind(
googlesheets4::read_sheet(url),
datos_cargados
)
# Solo no eliminar las últimas filas con año no duplicado
data_actualizada <- data_actualizada[!rev(duplicated(rev(data_actualizada$anio))),]
# Actualizar año máximo en el deslizador
updateSliderInput(
inputId = "anio",
max = max(data_actualizada$anio)
)
# Actualizar data en Google Sheets
googlesheets4::sheet_write(
data_actualizada,
ss = url,
sheet = "temperaturas"
)
# Devolver la data actualizada
data_actualizada
} else {
validate("Solo aceptamos archivos de tipo .csv")
}
})
temp_anual <- eventReactive(input$anio, {
anio <- input$anio
temperatura_anual <- data()[data()$anio == anio,]
temperatura_anual <- unlist(temperatura_anual)[-1]
temperatura_anual
})
output$barras <- renderPlot({
barplot(
height = temp_anual(), col = "skyblue",
xlab = "", ylab = "Temperatura promedio",
main = paste0("Año ", input$anio),
names = names(temp_anual()), las = 2
)
})
output$min_max <- renderPrint({
mes_max_temperatura <- colnames(data())[1+which.max(temp_anual())]
mes_min_temperatura <- colnames(data())[1+which.min(temp_anual())]
print(mes_max_temperatura)
print(mes_min_temperatura)
})
}
shinyApp(ui, server)
# ::::::::::::::::::::::::::::::::::::::::::
# Guardemos la data inicial en Google Sheets
# ::::::::::::::::::::::::::::::::::::::::::
url <- "https://docs.google.com/spreadsheets/d/1F1Uupju6kkJhwALZWMypdlT5b1VWsh3ZHadVQiFdsZ8"
# googlesheets4::sheet_write(
#   read.csv("./temperaturas.csv"),
#   ss = url,
#   sheet = "temperaturas" # Primero cambiar manualmente el nombre de la hoja
# )
# Guardar las credenciales en una carpeta .secrets
# googlesheets4::gs4_auth(
#   cache = ".secrets",
#   email = "luciocornejo11@gmail.com"
# )
library(shiny)
library(googlesheets4)
temperaturas <- googlesheets4::read_sheet(url)
# :::::::::::::::::::
# Interfaz de usuario
# :::::::::::::::::::
ui <- fluidPage(
titlePanel("Temperatura promedio mensual en Nottingham"),
sidebarLayout(
sidebarPanel(
sliderInput("anio", label = "Año", min = 1920, max = 1939, value = 1930),
fileInput("carga", NULL, buttonLabel = "Cargar archivo .csv", accept = ".csv")
),
mainPanel(
plotOutput("barras"),
verbatimTextOutput("min_max")
)
)
)
# ::::::::::::::::
# Función servidor
# ::::::::::::::::
server <- function(input, output) {
data <- eventReactive(input$carga, {
req(input$carga)
# Extensión del archivo cargado
ext <- tools::file_ext(input$carga$name)
if (ext == "csv") {
# Cargar data subida por el usuario
datos_cargados <- read.csv(input$carga$datapath)
# Data actualizada
data_actualizada <- rbind(
googlesheets4::read_sheet(url),
datos_cargados
)
# Solo no eliminar las últimas filas con año no duplicado
data_actualizada <- data_actualizada[!rev(duplicated(rev(data_actualizada$anio))),]
# Actualizar año máximo en el deslizador
updateSliderInput(
inputId = "anio",
max = max(data_actualizada$anio)
)
# Actualizar data en Google Sheets
googlesheets4::sheet_write(
data_actualizada,
ss = url,
sheet = "temperaturas"
)
# Devolver la data actualizada
data_actualizada
} else {
validate("Solo aceptamos archivos de tipo .csv")
}
})
temp_anual <- eventReactive(input$anio, {
anio <- input$anio
temperatura_anual <- data()[data()$anio == anio,]
temperatura_anual <- unlist(temperatura_anual)[-1]
temperatura_anual
})
output$barras <- renderPlot({
barplot(
height = temp_anual(), col = "skyblue",
xlab = "", ylab = "Temperatura promedio",
main = paste0("Año ", input$anio),
names = names(temp_anual()), las = 2
)
})
output$min_max <- renderPrint({
mes_max_temperatura <- colnames(data())[1+which.max(temp_anual())]
mes_min_temperatura <- colnames(data())[1+which.min(temp_anual())]
print(mes_max_temperatura)
print(mes_min_temperatura)
})
}
shinyApp(ui, server)
