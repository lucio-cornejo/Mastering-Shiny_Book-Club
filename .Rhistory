}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
setwd("ejemplos/capitulo_01")
setwd("ejemplos/capítulo_01")
dir()
setwd("app_01")
dir()
shinyApp()
shinyApp()
shinyApp()
library(shiny)
ui <- fluidPage(
"Hola, mundo"
)
server <- function(input, output, session) {
NULL
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
"Hola, mundo."
)
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
"Hola, mundo."
)
server <- function(input, output) {
}
shinyApp(ui, server)
list(x = 1:3)
library(shiny)
ui <- fluidPage(
numericInput("n", label = "Cantidad de valores", value = 100),
textOutput("txt")
)
server <- function(input, output, session) {
output$txt <- renderText({
input$n
})
}
shinyApp(ui, server)
runApp('ejemplos')
runApp('ejemplos')
library(shiny)
ui <- fluidPage(
textOutput("saludo")
)
server <- function(input, output, session) {
# Correcto
output$saludo <- "Hola, buenas"
}
shinyApp(ui, server)
paste0("hola", " buenas")
library(shiny)
ui <- fluidPage(
textInput("nombre", "¿Y tú cómo te llamas?"),
textOutput("saludo")
)
server <- function(input, output, session) {
output$saludo <- renderText({
paste0("¡Hola ", input$nombre, "!")
})
}
shinyApp(ui, server)
1+2
library(shiny)
ui <- fluidPage(
textInput("nombre", "¿Y tú cómo te llamas?"),
textOutput("saludo")
)
server <- function(input, output, session) {
output$saludo <- renderText({
paste0("¡Hola ", input$nombre, "!")
})
}
shinyApp(ui, server)
1+2
runApp('ejemplos')
runApp('ejemplos')
runApp('ejemplos')
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server1 <- function(input, output, server) {
input$greeting <- renderText(paste0("Hello ", name))
}
shinyApp(ui, server1)
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server2 <- function(input, output) {
greeting <- reactive({
paste0("Hello ", input$name)
})
output$greeting <- renderText(greeting())
}
shinyApp(ui, server2)
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server3 <- function(input, output) {
output$greting <- renderText(paste0("Hello", input$name))
}
shinyApp(ui, server3)
library(shiny)
ui <- fluidPage(
textInput("name", "What's your name?"),
textOutput("greeting")
)
server3 <- function(input, output) {
output$greeting <- renderText(paste0("Hello", input$name))
}
shinyApp(ui, server3)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(200, mean = 0.1, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(200, mean = 0.1, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(200, mean = 0.1, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(200, mean = 0.1, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(100, mean = 0, sd = 1)
x2 <- rnorm(200, mean = 0.1, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(1000, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 2, sd = 1)
freqpoly(x1, x2)
x1 <- rnorm(1000, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 2, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(1000, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 2, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
x1 <- rnorm(1000, mean = 1, sd = 1)
x2 <- rnorm(20, mean = 2, sd = 1)
freqpoly(x1, x2)
cat(t_test(x1, x2))
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"hola"
),
column(4,
"hola"
),
column(4,
"hola"
)
),
fluidRow(
"hola"
)
)
# función servidor
server <- function(input, output) {
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"hola"
),
column(4,
"hola"
)
),
fluidRow(
"hola"
)
)
# función servidor
server <- function(input, output) {
}
shinyApp(ui, server)
runApp('ejemplos')
"resultado"
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"Distribución 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1)
),
column(4,
"Polígono de frecuencias",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
# función servidor
server <- function(input, output) {
output$hist <- renderPlot({
x1 <- rnorm(input$n1, input$mean1, 1)
x2 <- rnorm(input$n2, input$mean2, 1)
freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
x1 <- rnorm(input$n1, input$mean1, 1)
x2 <- rnorm(input$n2, input$mean2, 1)
t_test(x1, x2)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"Distribución 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1)
),
column(4,
"Polígono de frecuencias",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
# función servidor
server <- function(input, output, session) {
x1 <- reactive(rnorm(input$n1, input$mean1, 1))
x2 <- reactive(rnorm(input$n2, input$mean2, 1))
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
t_test(x1(), x2())
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0)
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
timer <- reactiveTimer(500)
x1 <- reactive({
timer()
rpois(input$n, input$lambda1)
})
x2 <- reactive({
timer()
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0),
actionButton("simulate", "Simulate!")
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
x1 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda1)
})
x2 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"Distribución 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1)
),
column(4,
"Polígono de frecuencias",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
# función servidor
server <- function(input, output, session) {
x1 <- reactive(rnorm(input$n1, input$mean1, 1))
x2 <- reactive(rnorm(input$n2, input$mean2, 1))
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
t_test(x1(), x2())
})
}
shinyApp(ui, server)
runApp('ejemplos')
getwd()
setwd("session-example")
setwd("/session-example")
