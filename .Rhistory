)
# función servidor
server <- function(input, output) {
output$hist <- renderPlot({
x1 <- rnorm(input$n1, input$mean1, 1)
x2 <- rnorm(input$n2, input$mean2, 1)
freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
x1 <- rnorm(input$n1, input$mean1, 1)
x2 <- rnorm(input$n2, input$mean2, 1)
t_test(x1, x2)
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"Distribución 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1)
),
column(4,
"Polígono de frecuencias",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
# función servidor
server <- function(input, output, session) {
x1 <- reactive(rnorm(input$n1, input$mean1, 1))
x2 <- reactive(rnorm(input$n2, input$mean2, 1))
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
t_test(x1(), x2())
})
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0)
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
timer <- reactiveTimer(500)
x1 <- reactive({
timer()
rpois(input$n, input$lambda1)
})
x2 <- reactive({
timer()
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
ui <- fluidPage(
fluidRow(
column(3,
numericInput("lambda1", label = "lambda1", value = 3),
numericInput("lambda2", label = "lambda2", value = 5),
numericInput("n", label = "n", value = 1e4, min = 0),
actionButton("simulate", "Simulate!")
),
column(9, plotOutput("hist"))
)
)
server <- function(input, output, session) {
x1 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda1)
})
x2 <- eventReactive(input$simulate, {
rpois(input$n, input$lambda2)
})
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = 1, xlim = c(0, 40))
}, res = 96)
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
sprintf(
"p valor: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
# interfaz de usuario
ui <- fluidPage(
fluidRow(
column(4,
"Distribución 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1)
),
column(4,
"Distribución 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1)
),
column(4,
"Polígono de frecuencias",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
# función servidor
server <- function(input, output, session) {
x1 <- reactive(rnorm(input$n1, input$mean1, 1))
x2 <- reactive(rnorm(input$n2, input$mean2, 1))
output$hist <- renderPlot({
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
t_test(x1(), x2())
})
}
shinyApp(ui, server)
runApp('ejemplos')
getwd()
setwd("session-example")
setwd("/session-example")
library(shiny)
ui <- fluidPage(
titlePanel("Teorema del Límite Central"),
sidebarLayout(
sidebarPanel(
numericInput("m", "Tamaño de las muestras:", 2, min=11, max=100)
),
mainPanel(
plotOutput("hist")
)
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
medias <- replicate(1e4, mean(runif(input$m)))
hist(medias, breaks = 20, main = "Histograma de las medias")
}, res = 96)
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fluidRow(
column(4,
# style = "background-color: yellow;",
"Columna 1"
),
column(8,
# style = "background-color: red;",
"Columna 2"
)
),
fluidRow(
column(6,
# style = "background-color: blue;",
"Columna 3"
),
column(6,
# style = "background-color: green;",
"Columna 4"
)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
fluidRow(
column(4,
style = "background-color: yellow;",
"Columna 1"
),
column(8,
style = "background-color: red;",
"Columna 2"
)
),
fluidRow(
column(6,
style = "background-color: blue;",
"Columna 3"
),
column(6,
style = "background-color: green;",
"Columna 4"
)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("panel 1"),
tabPanel("panel 2"),
tabPanel("panel 2")
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
tabsetPanel(
tabPanel("panel 1",
"info"),
tabPanel("panel 2"),
tabPanel("panel 2")
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
runApp('ejemplos')
library(shiny)
ui <- fluidPage(
theme = bslib::bs_theme()
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
theme = bslib::bs_theme()
)
server <- function(input, output, session) {}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
textInput("txt", "Escribe algo:", "..."),
sliderInput("deslizador", "Rango:", 1, 100, 30)
),
mainPanel(
h1(paste0("Tema: darkly")),
h2("Encabezado 2"),
p("lorem ipsum")
)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
runApp('ejemplos')
library(bslib)
bootswatch_themes(version = version_default(), full_path = FALSE)
library(shiny)
ui <- fluidPage(
theme = bslib::bs_theme(
bg = "#0b3d91",
fg = "white",
base_font = "Source Sans Pro"
),
sidebarLayout(
sidebarPanel(
textInput("txt", "Escribe algo:", "..."),
sliderInput("deslizador", "Rango:", 1, 100, 30)
),
mainPanel(
h1(paste0("Tema: darkly")),
h2("Encabezado 2"),
p("lorem ipsum")
)
)
)
server <- function(input, output, session) {}
shinyApp(ui, server)
runApp('ejemplos')
mtcars
library(shiny)
library(shiny)
library(ggplot2)
require(thematic)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
titlePanel("Gráfico con tema/plantilla"),
plotOutput("plot")
)
server <- function(input, output, session) {
# thematic::thematic_shiny()
output$plot <- renderPlot({
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
geom_smooth()
}, res = 96)
}
shinyApp(ui, server)
runApp('ejemplos')
fluidPage(
textInput("name", "What's your name?")
)
runApp('C:/Users/HP/Desktop/example.R')
runApp('C:/Users/HP/Desktop/example.R')
runApp('C:/Users/HP/Desktop/example.R')
runApp('C:/Users/HP/Desktop/example.R')
runApp('ejemplos')
runApp('ejemplos')
iris
runApp('ejemplos')
shinyApp(ui, server)
data()
co2
runApp('ejemplos')
library(shiny)
ui <- fluidPage(
sliderInput("n", "Number of points", 1, 100, 50),
downloadButton("report", "Generate report")
)
server <- function(input, output, session) {
output$report <- downloadHandler(
filename = "report.html",
content = function(file) {
params <- list(n = input$n)
id <- showNotification(
"Rendering report...",
duration = NULL,
closeButton = FALSE
)
on.exit(removeNotification(id), add = TRUE)
rmarkdown::render("report.Rmd",
output_file = file,
params = params,
envir = new.env(parent = globalenv())
)
}
)
}
shinyApp(ui, server)
library(shiny)
temperaturas <- read.csv("./temperaturas.csv")
ui <- fluidPage(
sliderInput("anio", label = "Año", min = 1920, max = 1939, value = 1930),
plotOutput("barras"),
verbatimTextOutput("min_max")
)
server <- function(input, output) {
temp_anual <- reactive({
anio <- input$anio
temperatura_anual <- temperaturas[temperaturas$anio == anio,]
temperatura_anual <- unlist(temperatura_anual)[-1]
temperatura_anual
})
output$barras <- renderPlot({
barplot(
height = temp_anual(), col ="skyblue",
xlab = "", ylab = "Temperatura promedio",
main = paste0("Año ", input$anio),
names = colnames(temp_anual())[-1], las = 2
)
})
output$min_max <- renderPrint({
mes_max_temperatura <- colnames(temperaturas)[1+which.max(temp_anual())]
mes_min_temperatura <- colnames(temperaturas)[1+which.min(temp_anual())]
print(paste0("Temperatura máxima: ", mes_max_temperatura))
print(paste0("Temperatura mínima: ", mes_min_temperatura))
})
}
shinyApp(ui, server)
library(shiny)
temperaturas <- read.csv("temperaturas.csv")
ui <- fluidPage(
sliderInput("anio", label = "Año", min = 1920, max = 1939, value = 1930),
plotOutput("barras"),
verbatimTextOutput("min_max")
)
server <- function(input, output) {
temp_anual <- reactive({
anio <- input$anio
temperatura_anual <- temperaturas[temperaturas$anio == anio,]
temperatura_anual <- unlist(temperatura_anual)[-1]
temperatura_anual
})
output$barras <- renderPlot({
barplot(
height = temp_anual(), col ="skyblue",
xlab = "", ylab = "Temperatura promedio",
main = paste0("Año ", input$anio),
names = colnames(temp_anual())[-1], las = 2
)
})
output$min_max <- renderPrint({
mes_max_temperatura <- colnames(temperaturas)[1+which.max(temp_anual())]
mes_min_temperatura <- colnames(temperaturas)[1+which.min(temp_anual())]
print(paste0("Temperatura máxima: ", mes_max_temperatura))
print(paste0("Temperatura mínima: ", mes_min_temperatura))
})
}
shinyApp(ui, server)
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-1_base_interactiva")
shiny::runApp()
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso_2_actualizar_data")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
getwd()
temperaturas <- read.csv("data/temperaturas.csv")
datos_cargados <- read.csv("data/nueva_data.csv")
merge(
x = temperaturas, y = datos_cargados, all.x = TRUE
)
dplyr::left_join(temperaturas, datos_cargados)
datos_cargados
dplyr::left_join(temperaturas, datos_cargados)
temperaturas <- read.csv("data/temperaturas.csv")
datos_cargados <- read.csv("data/nueva_data.csv")
datos_cargados
rbind(temperaturas, datos_cargados)
x <- rbind(x, datos_cargados)
x <- rbind(temperaturas, datos_cargados)
x <- rbind(x, datos_cargados)
x
x[duplicated(x)|duplicated(x, fromLast = TRUE),]
x[!rev(duplicated(rev(x$anio))),]
shiny::runApp()
shiny::runApp()
getwd()
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso_2_actualizar_data")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-5_app_final")
shiny::runApp()
shiny::runApp()
setwd("D:/Mastering-Shiny_Book-Club/flujo_de_trabajo/paso-5_app_final")
shiny::runApp()
shiny::runApp()
shiny::runApp()
