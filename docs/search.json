[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Mastering Shiny Book Club",
    "section": "",
    "text": "Por medio de 5 sesiones prácticas, cada una de dos horas de duración, se explorará en nivel básico el paquete Shiny para crear aplicaciones web vía el lenguaje de programación R.\n\n\n\n\nNivel básico de programación con R.\n\n\n\n\nEstructura básica de la interfaz de usuario creada con Shiny, reactividad básica y creación de dashboards.\n\n\n\nPor medio del paquete Shiny, seremos capaces de crear aplicaciones web que permitan al usuario explorar de manera interactiva los resultados de un proyecto, sea estadístico o de temática más libre.\nAsimismo, este taller servirá para presentar diversos conceptos de desarrollo web, con la finalidad de explorar cómo tales tecnologías pueden potenciar nuestros reportes o dashboards.\n\n\n\nEl taller se realizará de manera virtual, los lunes y miércoles de 7 a 9 pm.\nEn cada sesión, se desarrollarán dos capítulos del libro Mastering Shiny, de libre acceso en línea.\nAl final de cada sesión, se asignará una tarea para los y las estudiantes del taller.\nEn la última sesión, los asistentes que deseen presentarán un proyecto personal elaborado con Shiny.\n\n\n\n\n\n\nUn equipo de R-Ladies guiará a las personas inscritas en el taller, para que puedan instalar las dependencias requeridas para este club de lectura.\n\n\n\n\n\nCapítulo 1: Your first Shiny app\n\nCreación de los componentes básicos de una aplicación Shiny.\nExpresiones reactivas.\n\nCapítulo 2: Basic UI\n\nComponentes principales de la interfaz de usuario.\nComponentes básicos del servidor Shiny.\n\n\n\n\n\n\nCapítulo 3: Basic reactivity\n\nProgramación reactiva.\nControl de la reactividad.\n\nCapítulo 4: Case study: ER injuries\n\nEjemplo práctico donde empleamos las herramientas presentadas hasta ahora.\n\n\n\n\n\n\nCapítulo 6: Layout, themes, HTML\n\nDiseños de una o más páginas.\nPaquete bslib.\n\nCapítulo 9: Uploads and downloads\n\nCarga y descarga de archivos en aplicaciones Shiny.\nReportes parametrizados.\n\n\n\n\n\n\nCapítulo 10: Dynamic UI\n\nActualización de inputs.\nCreación dinámica de contenido en la interfaz de usuario.\n\nTiempo libre para consultas y/o para revisión parcial de los proyectos finales por presentar.\n\n\n\n\n\nCreación de dashboards interactivos, vía los paquetes shiny, rmarkdown y flexdashboard.\nIntegración de R y JavaScript, vía el paquete Shiny.\n\n\n\n\n\nEn esta reunión, los asistentes que deseen expondrán aplicaciones Shiny que han llegado a implementar gracias las herramientas expuestas en el taller.\n\n\n\n\n\nLibro principal\nLibro auxiliar\nSolucionario"
  },
  {
    "objectID": "chapter_01.html",
    "href": "chapter_01.html",
    "title": "1  Tu primera aplicación Shiny",
    "section": "",
    "text": "Objetivos:"
  },
  {
    "objectID": "chapter_01.html#qué-es-shiny",
    "href": "chapter_01.html#qué-es-shiny",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.1 ¿Qué es Shiny?",
    "text": "1.1 ¿Qué es Shiny?\nShiny es una librería para crear aplicaciones web por medio de R o Python, sin necesidad de saber HTML, CSS o JavaScript.\nPese a ello, las aplicaciones Shiny admiten mucha personalización y llegan a aplicarse en contextos académicos (herramienta de enseñanza, presentación de modelos) y no académicos (dashboards interactivos).\nEjemplos de aplicaciones Shiny:\n\nhttps://vivekkatial.shinyapps.io/uber_shiny/#about\nhttps://kneijenhuijs.shinyapps.io/Datify/#section-summary\nhttps://mdubel.shinyapps.io/shark-attack/\nhttps://jennadallen.shinyapps.io/pet-records-app/"
  },
  {
    "objectID": "chapter_01.html#introducción",
    "href": "chapter_01.html#introducción",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.2 Introducción",
    "text": "1.2 Introducción\n\nComponenetes principales de una aplicación Shiny:\n\nUI: Interfaz de usuario (cómo se ve la app)\nserver(): Función servidor (cómo funciona la app)\n\nInstalemos Shiny usando el siguiente comando en la terminal de R:\n\ninstall.packages(\"shiny\")"
  },
  {
    "objectID": "chapter_01.html#crear-un-directorio-y-archivo-de-la-app",
    "href": "chapter_01.html#crear-un-directorio-y-archivo-de-la-app",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.3 Crear un directorio y archivo de la app",
    "text": "1.3 Crear un directorio y archivo de la app\n\nForma básica de Shiny app: Documento app.R dentro de algún directorio.\nDentro de app.R, insertar el siguiente código:\n\n# Cargar el paquete Shiny\nlibrary(shiny)\n\n# Definir la interfaz de usuario\nui <- fluidPage(\n  \"Hola, mundo\"\n)\n\n# Definir la interactividad de la app\nserver <- function(input, output, session) {\n}\n\n# Construir y ejecutar la app creada\nshinyApp(ui, server)"
  },
  {
    "objectID": "chapter_01.html#ejecutar-y-detener-la-app",
    "href": "chapter_01.html#ejecutar-y-detener-la-app",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.4 Ejecutar y detener la app",
    "text": "1.4 Ejecutar y detener la app\n\nPara ejecutar la app, hacer click en el botón Run App de RStudio, o ejecutar shiny::runApp() dentro del directorio que contiene el archivo app.R.\nPara detener la app, hacer click en el botón Stop de RStudio, o presionar Esc o Ctrl+C en la terminal de R."
  },
  {
    "objectID": "chapter_01.html#añadir-controles-a-la-interfaz-de-usuario",
    "href": "chapter_01.html#añadir-controles-a-la-interfaz-de-usuario",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.5 Añadir controles a la interfaz de usuario",
    "text": "1.5 Añadir controles a la interfaz de usuario\nui <- fluidPage(\n  selectInput(\"dataset\", label = \"Dataset\", choices = ls(\"package:datasets\")),\n  verbatimTextOutput(\"resumen\"),\n  tableOutput(\"tabla\")\n)\n\nfluidPage() es una función de diseño que inicializa todo el HTML, CSS y JavaScript que Shiny requiere.\nselectInput() es un control de input que crea una lista de opciones con la cual el usuario puede interactuar.\nverbatimTextOutput() y tableOutput() son controles de output que fijan en qué sección de la interfaz de usuario se mostrará el resultado/output de tales funciones.\n\nPara explorar las bases de datos que contiene R por default, podemos ejecutar el comando data()."
  },
  {
    "objectID": "chapter_01.html#añadir-reactividad",
    "href": "chapter_01.html#añadir-reactividad",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.6 Añadir reactividad",
    "text": "1.6 Añadir reactividad\nserver <- function(input, output, session) {\n  output$resumen <- renderPrint({\n    dataset <- get(input$dataset, \"package:datasets\")\n    summary(dataset)\n  })\n  \n  output$tabla <- renderTable({\n    dataset <- get(input$dataset, \"package:datasets\")\n    dataset\n  })\n}\n\nSintaxis común en Shiny:\n\ninput$IDENTIFICADOR\noutput$IDENTIFICADOR\nejemploOutput y renderEjemplo"
  },
  {
    "objectID": "chapter_01.html#expresiones-reactivas",
    "href": "chapter_01.html#expresiones-reactivas",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.7 Expresiones reactivas",
    "text": "1.7 Expresiones reactivas\n\nCon el fin de evitar repetir código, como se hizo con get(input$dataset, \"package:datasets\"), emplearemos una expresión reactiva.\nLas expresiones reactivas se crean definiendo su código dentro de la expresión reactive({...}).\nLa razón porque Shiny emplea expresiones reactivas, en vez de usar, por ejemplo, variables globales, es que las expresiones reactivas rastrean automáticamente todas sus dependencias. Es decir, si una expresión reactiva Y depende de algún valor X, cualquier cambio en X automáticamente actualiza el valor de la expresión Y.\n\nserver <- function(input, output, session) {\n  # Creamos una expresión reactiva\n  dataset <- reactive({\n    get(input$dataset, \"package:datasets\")\n  })\n\n  output$resumen <- renderPrint({\n    # Usamos la expresión reactiva como si fuese una función\n    summary(dataset())\n  })\n  \n  output$tabla <- renderTable({\n    dataset()\n  })\n}"
  },
  {
    "objectID": "chapter_01.html#resumen",
    "href": "chapter_01.html#resumen",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.8 Resumen",
    "text": "1.8 Resumen\n\nChuleta de Shiny"
  },
  {
    "objectID": "chapter_01.html#ejercicios",
    "href": "chapter_01.html#ejercicios",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.9 Ejercicios",
    "text": "1.9 Ejercicios\nHacer los ejercicios 2, 3 y 4."
  },
  {
    "objectID": "chapter_01.html#extra",
    "href": "chapter_01.html#extra",
    "title": "1  Tu primera aplicación Shiny",
    "section": "1.10 Extra",
    "text": "1.10 Extra\n\nGalería de Shiny.\nExtensiones de Shiny.\nshinyuieditor. Instalación"
  },
  {
    "objectID": "chapter_02.html",
    "href": "chapter_02.html",
    "title": "2  Interfaz básica de usuario",
    "section": "",
    "text": "Objetivos:"
  },
  {
    "objectID": "chapter_02.html#introducción",
    "href": "chapter_02.html#introducción",
    "title": "2  Interfaz básica de usuario",
    "section": "2.1 Introducción",
    "text": "2.1 Introducción\nRecordemos que la UI (interfaz de usuario) de la aplicación Shiny se encarga del frontend de nuestra app, y que la función servidor (server) define el backend de la apliación.\nEn este capítulo, nos enfocaremos en la interfaz de usuario."
  },
  {
    "objectID": "chapter_02.html#inputs",
    "href": "chapter_02.html#inputs",
    "title": "2  Interfaz básica de usuario",
    "section": "2.2 Inputs",
    "text": "2.2 Inputs\n\n2.2.1 Estructura común\n\nfuncionInput(inputId = \"\", ...)\nEl identificador conecta el frontend (ui) con el backend (server).\nEl identificador debe ser único en la app.\nEl identificador debe ser una cadena de texto (character) que solo puede contener letras, números y guiones bajos.\nEjemplo:\nsliderInput(\"min\", label = \"Límite (mínimo)\", value = 50, min = 0, max = 100)\n\nMás ejemplos\n\n\n2.2.2 Texto libre\nui <- fluidPage(\n  textInput(\"ejemplo1\", \"¿Cómo te llamas?\"),\n  passwordInput(\"ejemplo2\", \"¿Cuál es tu contraseña?\"),\n  textAreaInput(\"ejemplo3\", \"Cuéntame sobre ti ...\", rows = 3)\n)\n\n\n2.2.3 Inputs numéricos\nPara adquirir valores numéricos, tenemos dos opciones: numericInput() y sliderInput().\nui <- fluidPage(\n  numericInput(\"ejemplo1\", \"Número uno\", value = 0, min = 0, max = 100),\n  sliderInput(\"ejemplo2\", \"Número dos\", value = 50, min = 0, max = 100),\n  sliderInput(\"ejemplo3\", \"Rango\", value = c(10, 20), min = 0, max = 100)\n)\nIncluso es posible hacer animaciones con tales sliders.\n\n\n2.2.4 Fechas\nui <- fluidPage(\n  # Adquiere una fecha\n  dateInput(\"ejemplo1\", \"¿Cuándo naciste?\"),\n  # Adquiere un rango de fechas\n  dateRangeInput(\"ejemplo2\", \"¿Cuándo son tus vacaciones?\")\n)\n\n\n2.2.5 Lista de opciones\n\nTenemos varias alternativas:\n\nselectInput(): Permite seleccionar más de una opción.\nradioButtons(): Solo una opción seleccionable.\ncheckboxGroupInput(): Permite seleccionar más de una opción.\ncheckboxInput(): Solo una opción seleccionable.\n\n\nanimales <- c(\"Perro\", \"Gato\", \"Ratón\", \"Odio a los animales\")\n\nui <- fluidPage(\n  selectInput(\"ejemplo1\", \"¿Cuál es tu estado favorito de EEUU?\", state.name),\n  selectInput(\n    \"ejemplo2\", \"¿Cuál es tu estado favorito de EEUU?\", \n    state.name, multiple = TRUE\n  ),\n  \n  radioButtons(\"ejemplo3\", \"¿Cuál es tu animal favorito?\", animales),\n\n  checkboxGroupInput(\"ejemplo4\", \"¿Qué animales no odias?\", animales),\n  checkboxInput(\"ejemplo5\", \"¿Se entiende?\", value = TRUE),\n  checkboxInput(\"ejemplo6\", \"¿Muchos ejemplos ya?\")\n)\n\n\n2.2.6 Cargar archivos\n\nEsta opción es muy útil para la creación de reportes parametrizados, pero la exploraremos con mayor detalle en la sesión 3.\n\nui <- fluidPage(\n  fileInput(\"carga\", NULL)\n)\n\n\n2.2.7 Botones de acción\n\nEl uso no trivial de los botones de acción, actionButton() y actionLink(), requerirá conocer las funciones observeEvent() or eventReactive(), asociadas a la función servidor.\n\nui <- fluidPage(\n  fluidRow(\n    actionButton(\"ejemplo1\", \"¡Presiona aquí!\", class = \"btn-success\"),\n    actionLink(\"ejemplo2\", \"¿Aguita?\", icon = icon(\"cocktail\"))\n  ),\n  fluidRow(\n    actionButton(\n      \"ejemplo3\", \n      class = c(\"btn-danger\", \"btn-block\"),\n      label = \"¡¡ERES NUESTRO VISITANTE 1.000.000!!\"\n    )\n  )\n)\nChuleta de opciones de Bootstrap para class = \"\"."
  },
  {
    "objectID": "chapter_02.html#outputs",
    "href": "chapter_02.html#outputs",
    "title": "2  Interfaz básica de usuario",
    "section": "2.3 Outputs",
    "text": "2.3 Outputs\n\n2.3.1 Texto\n\ntextOutput(), junto con renderText({}), se emplean para impprimir texto estándar (cadenas de caracteres).\nverbatimTextOutput(), junto con renderPrint({}), se usa cuando se requiere imprimir el resultado (textual) del código dentro de renderPrint.\nLas llaves {} se utilizan para incluir más de una línea de código dentro de, por ejemplo, renderText({}), sin necesidad de usar comas como hemos estado haciendo para fluidPage().\n\nui <- fluidPage(\n  textOutput(\"texto\"),\n  verbatimTextOutput(\"codigo\")\n)\n\nserver <- function(input, output, session) {\n  output$texto <- renderText(\"Hola, buenas.\")\n  output$codigo <- renderPrint({\n    \"Hola, buenas.\"\n  })\n}\n\n\n2.3.2 Tablas\n\ntableOutput() y renderTable() se emplean para imprimir tablas en su totalidad. Resultado estático.\ndataTableOutput() y renderDataTable() sirven para mostrar solo una parte del total de filas de la tabla, además de permitir cambiar qué filas mostrar. Resultado dinámico.\n\nui <- fluidPage(\n  tableOutput(\"estatico\"),\n  dataTableOutput(\"dinamico\")\n)\nserver <- function(input, output, session) {\n  output$estatico <- renderTable(head(mtcars))\n  output$dinamico <- renderDataTable(mtcars, options = list(pageLength = 5))\n}\n\n\n2.3.3 Gráficos\nPara los gráficos fundamentales de R (plot(), ggplot(), etc), se emplea plotOutput() y renderPlot().\nui <- fluidPage(\n  plotOutput(\"grafico\", width = \"400px\")\n)\nserver <- function(input, output, session) {\n  output$grafico <- renderPlot(\n    plot(1:5), \n    # Resolucion del gráfico, en píxeles por pulgada\n    res = 96\n  )\n}\n\n\n2.3.4 Descargas\nEsto lo exploraremos en la tercera sesión.\n\n\n2.3.5 Resumen\n\nChuleta de Shiny widgets\n\n\n\n2.3.6 Ejercicios\n\nTodos los ejercicios de esta sección."
  }
]